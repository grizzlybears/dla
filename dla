#!/usr/bin/python2 -S
# -*- coding: utf-8 -*-
import sys
reload(sys)
sys.setdefaultencoding("utf-8")

import site
import traceback
import codecs
import os
import sqlite3
#import pprint
import subprocess

import his_loader
import db_operator
import analyzer

MY_NAME='dla'

# 工具入口

def print_usage( argv0 = MY_NAME ):
    print "Usage:"
    print "  %s list      列出导入单个日线文件" % argv0
    print "  %s import    <日线文件>   导入单个日线文件" % argv0
    print "  %s importdir <日线目录>   导入指定目录下所有日线文件(.txt) " % argv0


# 处理 'import' 子命令
def handle_import( argv, argv0 = MY_NAME ): 
    
    i = len(argv)
    if ( i < 1 ):
        print "  %s import    <日线文件>   导入单个日线文件" % argv0
        print "\n 未指定 <日报文件>\n"
        return 1

    try:
        # connect to DB 
        conn = db_operator.get_db_conn()
        dbcur = conn.cursor()
        inventory_ranges = db_operator.get_inventory(dbcur)

        # real stuff
        his_loader.load_some( argv[0] , dbcur, inventory_ranges)
        
        # DB clean up
        dbcur.close()
        conn.commit()
        conn.close()

    except  Exception as e:
        #pp = pprint.PrettyPrinter(indent=4)
        #pp.pprint(e) 
        
        (t, v, bt) = sys.exc_info()
        traceback.print_exception(t, v, bt)

        print
        print e

        conn.close()
        return 1

    return 0

# 处理 'importdir' 子命令
def handle_importdir( argv, argv0 = MY_NAME ):
    i = len(argv)
    if ( i < 1 ):
        print "  %s importdir <日线目录>   导入指定目录下所有日线文件(.txt)" % argv0
        print "\n 未指定 <日线目录>\n"
        return 1

    myself = sys.argv[0]
    r = subprocess.call([ "find"
            , argv[0]
            , "-name"
            , "*.txt"
            , "-exec"
            , "./mac_csv_helper"
            , "{}"
            , ";"
            ])
    return r 

# 处理 'list' 子命令
def handle_list( argv, argv0 = MY_NAME ): 
    try:
        # connect to DB 
        conn = db_operator.get_db_conn()
        dbcur = conn.cursor()
        inventory_ranges = db_operator.get_inventory(dbcur)

        # real stuff
        analyzer.print_inventory( inventory_ranges)
        
        # DB clean up
        dbcur.close()
        conn.commit()
        conn.close()

    except  Exception as e:
        #pp = pprint.PrettyPrinter(indent=4)
        #pp.pprint(e) 
        
        (t, v, bt) = sys.exc_info()
        traceback.print_exception(t, v, bt)

        print
        print e

        conn.close()
        return 1

    return 0


def main(): 
    i = len(sys.argv)
    if ( i < 2 ):
        print_usage()
        return 1

    sub_command = sys.argv[1]

    if ('import' == sub_command ):
        return handle_import ( sys.argv[2:] ) 
    elif ('importdir' == sub_command ):
        return handle_importdir ( sys.argv[2:] )  
    elif ('list' == sub_command ):
        return handle_list ( sys.argv[2:] ) 

    elif ('help' == sub_command ):
        print_usage()
        return 1
    else:
        print "\n无效的‘子命令’ -- %s\n" % ( sub_command, )
        print_usage()
        return 1

    return 0

if __name__ == "__main__":
    r = main()
    sys.exit(r)


